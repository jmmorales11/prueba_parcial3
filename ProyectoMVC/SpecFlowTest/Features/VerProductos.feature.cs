// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Leer Productos")]
    public partial class LeerProductosFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VerProductos.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Leer Productos", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verificar la lista de todos los productos")]
        public virtual void VerificarLaListaDeTodosLosProductos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificar la lista de todos los productos", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductName",
                            "Category",
                            "Price",
                            "StockQuantity"});
                table10.AddRow(new string[] {
                            "Laptop Pro X",
                            "Electronics",
                            "1500.00",
                            "25"});
                table10.AddRow(new string[] {
                            "Wireless Mouse",
                            "Accessories",
                            "25.99",
                            "100"});
                table10.AddRow(new string[] {
                            "Gaming Monitor",
                            "Electronics",
                            "299.99",
                            "30"});
                table10.AddRow(new string[] {
                            "Office Chair",
                            "Furniture",
                            "89.95",
                            "10"});
                table10.AddRow(new string[] {
                            "USB-C Hub",
                            "Accessories",
                            "45.50",
                            "50"});
                table10.AddRow(new string[] {
                            "Bluetooth Headphones",
                            "Electronics",
                            "79.99",
                            "0"});
                table10.AddRow(new string[] {
                            "Ergonomic Desk",
                            "Furniture",
                            "199.99",
                            "15"});
#line 4
    testRunner.Given("Existen los siguientes productos en la base de datos", ((string)(null)), table10, "Given ");
#line hidden
#line 13
    testRunner.When("Solicito la lista de productos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductName",
                            "Category",
                            "Price",
                            "StockQuantity"});
                table11.AddRow(new string[] {
                            "Laptop Pro X",
                            "Electronics",
                            "1500.00",
                            "25"});
                table11.AddRow(new string[] {
                            "Wireless Mouse",
                            "Accessories",
                            "25.99",
                            "100"});
                table11.AddRow(new string[] {
                            "Gaming Monitor",
                            "Electronics",
                            "299.99",
                            "30"});
                table11.AddRow(new string[] {
                            "Office Chair",
                            "Furniture",
                            "89.95",
                            "10"});
                table11.AddRow(new string[] {
                            "USB-C Hub",
                            "Accessories",
                            "45.50",
                            "50"});
                table11.AddRow(new string[] {
                            "Bluetooth Headphones",
                            "Electronics",
                            "79.99",
                            "0"});
                table11.AddRow(new string[] {
                            "Ergonomic Desk",
                            "Furniture",
                            "199.99",
                            "15"});
#line 14
    testRunner.Then("Debería ver los siguientes productos en la lista", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
